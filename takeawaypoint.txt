********************************************	01/08	Day 1 ***************************************
--All programming languages are software
--James osling developed java in 1991.	
--Java 1st version in 1996 JDK-1
--Where to write java code ? 
	Editor -> BlueJ, Doctor Java, Sublime Text
	IDE -> Eclipse, Intellij, STS, Netbeans, VS code
download from https://spring.io/tools

compile java source code using javac <FileName>.java
run the compiled source code of java <className>.class file via java <className>


****************************************************** 01/09 Day 2 ***************************************

Main method is for the execution purpose only NOT for compilation 	
delimeters ----> {,},;,(,), and so on.........
keywords
identifiers 
public --> access everywhere
protected --> class,same packages and child classes of different packages too.
default ----> access in class and same packes only.
private ----> access in class only.


*************************************************** 01/10 Day 3 ***************************************************

Data Type
proper data representation
proper memory allocation
proper operation to be performed

Types:
	Primitive. :
		byte,short,int,long,float,double,char,boolean.
	Non-Primitive.
		String,Array,Classes,Collection,Date,Enums,


Primitive types and their wrapper class covered all
		    byte 		Byte
		    short 		Short
		    int			Integer
		    long		Long
		    float		Float
		    double		Double
		    char		Character
		    boolean		Boolean

auto boxing
		    int k = 343;
		    Integer p = k; //auto-boxing ---> providing methods of wrapper to p using value of k

auto unboxing
			    Integer p = 3434;s
			    int k = p // auto unboxing.

 BigInteger
 BigDecimal
	BigInteger a= BigInteger.valueOf(Long.MAX_VALUE);
		BigInteger b= BigInteger.valueOf(Long.MAX_VALUE);
		BigInteger c = a.add(b);
		System.out.println(c);



***************************************************** 01/11 Day 4 ***********************************************************
Package:
	collection of related classes and interfaces.
	other then java.lang package should be imported.
	java.lang ----> default package.

Type Casting: 
	implicit casting  -------> Automatically casted by java compiler.
		byte -> short -> int -> long -> float -> double

	explicit casting --------> should be casted by user using syntax 
		syntax:
			data_type var = (data_type) value;

		double -> float -> long -> int -> short -> byte -> char

		explicit casting is required when we want to convert a data types with higher size to smaller size.
		example: float number = 12.343f;
				int myNumber = (int) number //myNumber = 12
				int a = (int) 12.234f; 
				
Pre and post increment.  ++a and a++
		int a= 10;
		System.out.println(a++);
		System.out.println(a = a+5);
		
		System.out.println(++a);
		System.out.println(++a + a++);
		System.out.println(a);
	
Control Statement.
		Use to implement conditions in program
		
		Types
		1. Selection (Decision Making)
			a.if
				Syntax:
					if(condition)
					{
						body to execute if condition evaluates true.
					}
			b.if-else
			c.nested if else
			d.else if (if-else ladder)
			e.switch
		
		2. Looping(iteration)
			a.for
				a.1. forEach loop
			b.while
			c.do-while
		3. Jumping (Branching)
			a.break
			b.continue;
			c.return

		 

************************************************* 01/12 Day 5 ****************************************************

if-else
	# use to implement exactly two conditions.
	# syntax:
	if(condition)
	{
		//code to execute if the condition evaluates true
	}
	else
	{
		//code to execute if the condition evaluates to false
	}

Nested if-else
	#syntax:
		if(condition1)
		{
			if(condition2)
			{ 
				if(condition 3)
				{
					//code to execute if all conditions 1,2 and 3 are evaluated as true.
				}
				else
				{
					//code to execute if condition1 and condition2 are true but condition 3 is false
				}
			}
			else
			{
				//code to execute if condition 1 is true but conditioon2 is false
			}
		}
		else
		{
			//code to execute if condition1 is false.
		} 


if else ladder / else if
	# syntax:
		if(condition 1)
			{
			code to execute if condition1 evaluates to true
			}
		else if(condition 2)
			{
				code to execute if condition2 evaluates to true
			}
			else if(condition 3)
			{
				code to execute if condition3 evaluates to true.
			}
			......
			else
			{
			code to execute of none of the condition evaluates to true.
			}
		
Switch
	#Syntax:  
		switch(variable)
		{
			case 1:
				// satements
				break;
			case 2:
				//statements
				break;
		.
		.
		.
		.
		.
		.
			default:
				//stmt
				break;
		}

		Alternative syntax from java12 and above.....
		datatype variableName = switch(vairable)
		{
			case 1 -> value1;
			case 2 -> value2;
			.
			.
			..
			.
			default -> value3; 
		}
		  
   
		    	

****************************************************** 01/14 Day 6 ***************************************************************
for loop
	#syntax:
		for(initialization;condition;updation)     // updation---> increment/decrement.
		{
				body
		}

forEach loop	
	   #used to read data from collection (array, map,list,set etc)
	   
	   Syntax:
	   for(dataType var:collection)
	   {
	    	body...
	   }

while loop
 	#syntax
   			while(condition)
   			{
   				//statements
   				updation (increment/decrement)
   			}


do while loop
	Syntax:
  		do
		   {
		    // statement
		    updation..
		    }while(condition);

break
	break the flow of loop / exit out of loop
	syntax:
		break;
continue
	skips the current iteration of loop and jumps to next iteration.
	syntax:
		loop;
return
	returns the control/flow of program to the function calling point/line.
	syntax:
		return;
		return <value>;




****************************************************** 01/15 Day 7 ***************************************************************
Methods.
	# use for code re-usability.
	# lines or block of code used to perform specific task in the program.
	# In Java, there are no stand alone functions. Every function must be associated with a class,
	and therefore, they are referred to as methods. Java does not have "free functions" like in some other languages.
	#Syntax:
		returnType methodName(arg1,arg2,.....argn)
		{
			// statements..
		}
	# return_type:
			a. void			:		no value(result) return from method. 
			b. non-void		:		value(result) return from method.
	
	# types of function
		1. no return type with no parameters.
			eg: void sum()
				{
					//statements...
				}
		2. no return type with parameters.
			 void printTable(int n)
			{
				System.out.println("Multiplication table of "+n+" :");
				for(int i=1;i<=10;i++)
				{
					System.out.println(n+" X "+i+" = "+n*i);
				}
			}
		3. return type with no parameters.
			 int getSum1To100()
			{
				//code to find sum...
			}
		4 return type with parametrs.
			 int findLargets(int a,int b, int c)
			 {
				// code to find the largetst one.....
			 }



****************************************************** 01/16 Day 8 ***************************************************************
Array           ------> Collection of homogeneous data.
				------> Group of multiple values of same data type with fixed size.
				Can contain duplicate data also.
				Contagious memory allocation.
				array is an object in java (implicitly)

			#Syntax:
					data_type  array_name[]  = new data_type[size]

					  Or
					data_type[] array_name = new data_type[size];

					String[] cities = new String[100];
					float [] height = new float[500000];
					char  alphas[] = new char[26];
					Dog dog[] = new Dog[200];


	when to use array?
		  	multiple values (greater than 3)
		  	having same dataType
		  	Fixed number of values
	

**********************************************************01/17 Day 9 *****************************************************************
Array with method
	a. Array as argument :
		void sum(int[] array)
		{
			//
		}
		here we are passing an array of integer in method sum.
	b. Array as return type
		int[] get20Numbers()
		{
			//array = 20,10,12,13,43....
			return array;
		}

		// we are returning array of integer from the method named get20Numbers()

MultiDimensional Array
	# use to manage data in row and column format/tabular/matrix format.
	# Syntax:
		data_type array_name[][] = new data_type[rows][cols];

		e.g:
			int mat[][] = new int[2][2];

		
		inserting data in array:
			use nested for loop
			for(int i=0;i<array.length;i++)
			{
				for(int j = 0;j<array[i].length;j++)
				{
					array[i][j] = valueToInsert;
				}
			}

		reading data from array

		//method 1
		for(int[] x:array)
		{
			for(int y:x)
			{
				sysout(y);
			}
		}

		//method 2
		for(int i=0;i<array.length;i++)
		{
			for(j=0;j<array[i].length;j++)
			{
				sysout(array[i][j])
			}
		}

		//method 3
		for(int[]x:array)
		{
			sysout(Arrays.toString(x))
		}



Methods of Arrays.
	1. Sorting
		Arrays.sort(arrayName);
		sorts the array in ascending order.

	2.fill
		Arrays.fill(arrayName,value)
		fills the entire array with the value mentioned.
	
	3.fill in range
		Arrays.fill(arrayName,startIndex,endIndex,value);
		fills the array with value in the range endIndex excluded.
	
	4.copy within range
		Arrays.copyOfRange(arrayName,3,12)
		copies the old array to new array within specified range.

*********************************************************** Day10 01/19***************************************************************
OOP - Object oriented Programming.
1. Class and Object
	2. Encapsulation
	3. Inheritance
	4. Polymorphism
	5. Abstraction
		a. Abstract Class
		b. Interface

Class
	Use to represent real world entity/things.
	Class contains properties and methods (State/behave)
	Class is a collection/group of objects having similar behaviors.
	Class is a blue print/template of object.
	Class is a user defined/reference data type.

	Syntax:
		class className{
			//properties
			//methods.
		}


Object/Instance
	implementation of class.
	instance of class.
	object contains instance variable and instance methods.
	object allocates memory.

	Syntax:
	className objectName = new className();	
	OR
	new className();
	

*********************************************************** Day11 01/21***************************************************************
Constructor
    use to create an object in java.
    special type of method which has same name as class name.
    It has no return type.
    If there is no any user defined constructor in class then, Java provides default constructor to create an object.

Types
    default constructor.
        use to create object and set default values to object
        syntax:
            class_name()
            {
                //set default values to object.
            }
    parameterized constructor.
        use to create object and set dynamic values to object.
        syntax:
            class_name(args1,args2,arg3,...................,argn)
            {
                //set dynamic values to object.
            }

this
    this keyword represent current object.
    we can call following through this:
        instance variables, -----------> this.name = "aryal"
        instance methods, -------------> this.displayName();
        constructors. -----------------> this() / this("keshab",444);
                constructor DO RETURN a value and its a object being created...

**********************************************************************************************************************************************
																														Notes Maintained by:
																														Keshab Aryal 
		